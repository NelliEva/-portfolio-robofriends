{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","cardComponent","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAiBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACE,4BAAKF,EAAL,KACA,2BAAIC,MCeMK,EApBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,EAAgBD,EAAME,KAAK,SAACC,EAAMC,GACvC,OACC,kBAAC,EAAD,CACDC,IAAKD,EACLT,GAAIK,EAAMI,GAAGT,GACbF,KAAMO,EAAMI,GAAGX,KACfC,MAAOM,EAAMI,GAAGV,WAGjB,OAEA,6BACEO,ICFYK,EAbE,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKZ,UAAU,OAChB,2BAAQA,UAAU,mCAClBa,KAAK,SACCC,YAAY,gBACZC,SAAUH,MCGHI,G,MATA,SAACC,GACf,OACA,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,YCuBMC,E,kDAzBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DASFC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAOxB,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAKX,MAAMK,a,GArBOQ,aC+CZC,E,kDAzCd,aAAe,IAAD,8BACb,gBAYDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAZzC,EAAKX,MAAQ,CACZpB,MAAM,GACHO,YAAa,IAJJ,E,gEAOO,IAAD,OACnByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACzB,MAAOoC,S,+BAQ5B,IAAD,OACFC,EAAeb,KAAKJ,MAAMpB,MAAMsC,QAAO,SAAAtC,GAC5C,OAAOA,EAAMP,KAAK8C,cAAcC,SAAS,EAAKpB,MAAMb,YAAYgC,kBAEjE,OAA+B,IAA3Bf,KAAKJ,MAAMpB,MAAMyC,OACb,uCAIR,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,MAAOqC,W,GAjCLX,aCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACR,kBAAC,EAAD,MAECC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.e653970b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className=\" tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t <div>\r\n\t\t   <h2>{name} </h2>\r\n\t\t   <p>{email}</p>\r\n\r\n\t\t </div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList= ({ robot }) => {\r\n\tconst cardComponent = robot.map( (user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\tkey={i} \r\n\t\tid={robot[i].id} \r\n\t\tname={robot[i].name} \r\n\t\temail={robot[i].email} />\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\r\n\t<div>\r\n\t {cardComponent}\r\n\t</div> \r\n\r\n\r\n\r\n\t\t);\r\n}\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst Searchbox= ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t  <div className='pa2'>\t\r\n\t\t<input  className='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype=\"search\" \r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n         />\r\n      </div> \r\n\t\t)\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }} >\r\n\t{ props.children}\r\n\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\ncomponentDidCatch(error, info) {\r\n\tthis.setState({hasError: true})\r\n\r\n}\r\n\r\n\r\n\trender () {\r\n\t\t\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t robot:[],\r\n\t     searchfield: ''\r\n\t }\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => this.setState({robot: users}));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\r\n\t}\r\n\trender() {\r\n\t\tconst filteredRobot= this.state.robot.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif (this.state.robot.length ===0) {\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t} else {\r\n\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t <h1 className='f1' >RoboFriends</h1>\r\n\t\t <Searchbox searchChange={this.onSearchChange}/>\r\n\t\t <Scroll>\r\n\t\t   <ErrorBoundry>\r\n\t\t    <CardList robot={filteredRobot} />\r\n\t\t   </ErrorBoundry>\r\n\t\t </Scroll>\r\n\t\t</div> \r\n\r\n\t\t);\r\n\t}\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App/>\n\t  , \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}